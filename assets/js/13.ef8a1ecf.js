(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{410:function(t,e,a){"use strict";a.r(e);var n=a(56),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("开发中遇到的问题")]),t._v(" "),a("p",[t._v("// TODO")]),t._v(" "),a("p",[a("strong",[t._v("https://www.lilichao.com/")])]),t._v(" "),a("h2",{attrs:{id:"一些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些问题"}},[t._v("#")]),t._v(" "),a("strong",[t._v("一些问题")])]),t._v(" "),a("h3",{attrs:{id:"为什么要在componentdidmount中获取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要在componentdidmount中获取数据"}},[t._v("#")]),t._v(" 为什么要在"),a("code",[t._v("componentDidMount")]),t._v("中获取数据？")]),t._v(" "),a("h3",{attrs:{id:"componentdidupdate可以做什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate可以做什么"}},[t._v("#")]),t._v(" "),a("code",[t._v("componentDidUpdate")]),t._v("可以做什么？")]),t._v(" "),a("h3",{attrs:{id:"你真的理解setstate吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你真的理解setstate吗"}},[t._v("#")]),t._v(" 你真的理解"),a("code",[t._v("setState")]),t._v("吗？")]),t._v(" "),a("p",[t._v("setState放在异步函数中，如果用setState(count+1)这种形式，触发多次只会执行一次；要改为setState(count => count + 1)")]),t._v(" "),a("h3",{attrs:{id:"setstate什么时候是异步-同步的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setstate什么时候是异步-同步的"}},[t._v("#")]),t._v(" "),a("code",[t._v("setState")]),t._v("什么时候是异步/同步的？")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/image-20230201103604483.png",alt:"image-20230201103604483"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("react18")])]),t._v(" "),a("p",[t._v("setState 和 useState的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("相同点：执行多个set（相同/不同都可以）时只执行一次render；同步和异步render执行次数和结果都是一样的")])]),t._v(" "),a("li",[a("p",[t._v("不同点：setState只执行最后一次，useState每次都会执行（比如同一个state.a=0执行两次++，setState最后返回的是1，useState返回的是2）")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("react18之前")])]),t._v(" "),a("p",[t._v("在异步函数中是同步的，在同步函数中是异步的")])])]),t._v(" "),a("h2",{attrs:{id:"多页面配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多页面配置"}},[t._v("#")]),t._v(" 多页面配置")]),t._v(" "),a("p",[a("strong",[t._v("修改配置之后要重新运行yarn start")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("修改/config/paths.js")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 在module.exports中添加\nappLoginHtml: resolveApp("public/login.html"),\nappLoginJs: resolveModule(resolveApp, "src/login"),\n')])])])]),t._v(" "),a("li",[a("p",[t._v("修改webpack.config.js配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// entry\nentry: {\n  index:\n isEnvDevelopment && !shouldUseReactRefresh\n      ? [webpackDevClientEntry, paths.appIndexJs]\n      : paths.appIndexJs,\n  login:\n    isEnvDevelopment && !shouldUseReactRefresh\n      ? [webpackDevClientEntry, paths.appLoginJs]\n      : paths.appLoginJs\n},\n/*\n// 简单点\nentry: {\n  index: paths.appIndexJs,\n  login: paths.appLoginJs\n},\n*/\n\n// output\n// 将filename修改为[name].js\nfilename: isEnvProduction\n        ? "static/js/[name].[contenthash:8].js"\n        : isEnvDevelopment && "static/js/[name].js",\n        \n// plugins\n// HtmlWebpackPlugin  修改之前的，再新增一个\nnew HtmlWebpackPlugin(\n    Object.assign(\n      {},\n      {\n        inject: true,\n        template: paths.appHtml,\n        \n        // 修改点： filename配置项和chunks\n        filename: "index.html",\n        chunks: ["index"],\n      },\n      isEnvProduction\n        ? {\n            minify: {\n              removeComments: true,\n              collapseWhitespace: true,\n              removeRedundantAttributes: true,\n              useShortDoctype: true,\n              removeEmptyAttributes: true,\n              removeStyleLinkTypeAttributes: true,\n              keepClosingSlash: true,\n              minifyJS: true,\n              minifyCSS: true,\n              minifyURLs: true,\n            },\n          }\n        : undefined\n    )\n  ),\n  new HtmlWebpackPlugin(\n    Object.assign(\n      {},\n      {\n        inject: true,\n        template: paths.appLoginHtml,\n        filename: "login.html",\n        chunks: ["login"],\n      },\n      isEnvProduction\n        ? {\n            minify: {\n              removeComments: true,\n              collapseWhitespace: true,\n              removeRedundantAttributes: true,\n              useShortDoctype: true,\n              removeEmptyAttributes: true,\n              removeStyleLinkTypeAttributes: true,\n              keepClosingSlash: true,\n              minifyJS: true,\n              minifyCSS: true,\n              minifyURLs: true,\n            },\n          }\n        : undefined\n    )\n  ),\n\n// ManifestPlugin  entrypoints.main 修改为 entrypoints.index\nnew ManifestPlugin({\n    fileName: "asset-manifest.json",\n    publicPath: paths.publicUrlOrPath,\n    generate: (seed, files, entrypoints) => {\n      const manifestFiles = files.reduce((manifest, file) => {\n        manifest[file.name] = file.path;\n        return manifest;\n      }, seed);\n      const entrypointFiles = entrypoints.index.filter(\n        (fileName) => !fileName.endsWith(".map")\n      );\n\n      return {\n        files: manifestFiles,\n        entrypoints: entrypointFiles,\n      };\n    },\n  }),\n')])])])])]),t._v(" "),a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),a("h3",{attrs:{id:"jsx语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsx语法"}},[t._v("#")]),t._v(" JSX语法")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("React.createElement(component, props, ...children)")]),t._v(" 函数的语法糖")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<MyButton color=\"blue\" shadowSize={2}>\n  Click Me\n</MyButton>\n\n// 会被编译为\nReact.createElement(\n  MyButton,\n  {color: 'blue', shadowSize: 2},\n  'Click Me'\n)\n")])])]),a("ul",[a("li",[a("strong",[t._v("如果没有子节点，可以使用自闭合的标签形式")])])]),t._v(" "),a("p",[a("code",[t._v('<div className="sidebar" />')])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("必须有结束标签")])])])]),t._v(" "),a("li",[a("p",[t._v("大写字母开头的 JSX 标签意味着它们是 React 组件")]),t._v(" "),a("p",[a("strong",[t._v("用户自定义的组件必须以大写字母开头，否则React 会认为 它 是一个 HTML 标签（因为它没有以大写字母开头）")])])]),t._v(" "),a("li",[a("p",[t._v("点语法")]),t._v(" "),a("blockquote",[a("p",[t._v("当你在一个模块中导出许多 React 组件时，以使用点语法来引用一个 React 组件。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\n\nconst MyComponents = {\n  DatePicker: function DatePicker(props) {\n    return <div>Imagine a {props.color} datepicker here.</div>;\n  }\n}\n\nfunction BlueDatePicker() {\n  return <MyComponents.DatePicker color=\"blue\" />;\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("动态组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Story(props) {\n  // 这里一定要先赋值再使用，JSX 类型不能是一个表达式\n  const SpecificStory = components[props.storyType];\n  return <SpecificStory story={props.story} />;\n}\n\n// 错误使用\nfunction Story(props) {\n  return <components[props.storyType] story={props.story} />;\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("props默认值为true")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<MyTextBox autocomplete />\n// 等价于\n<MyTextBox autocomplete={true} />\n")])])])]),t._v(" "),a("li",[a("p",[t._v("JSX 会移除行首尾的空格以及空行。与标签相邻的空行均会被删除，文本字符串之间的新行会被压缩为一个空格。因此以下的几种方式都是等价的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1\n<div>Hello World</div>\n\n// 2\n<div>\n  Hello World\n</div>\n\n// 3\n<div>\n  Hello\n  World\n</div>\n\n// 4\n<div>\n\n  Hello World\n</div>\n")])])])]),t._v(" "),a("li",[a("p",[t._v("布尔类型、Null、Undefined、Symbol、BigInt将会被忽略")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("false")]),t._v(", "),a("code",[t._v("null")]),t._v(", "),a("code",[t._v("undefined")]),t._v(", and "),a("code",[t._v("true")]),t._v(" 是合法的子元素。但它们并不会被渲染。")])]),t._v(" "),a("p",[t._v("以下的JSX表达式渲染结果相同")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 1\n<div />\n\n// 2\n<div></div>\n\n// 3\n<div>{false}</div>\n\n// 4\n<div>{null}</div>\n\n// 5\n<div>{undefined}</div>\n\n// 6\n<div>{true}</div>\n")])])])]),t._v(" "),a("li",[a("p",[t._v("数据是一个数组时，React可以拿到值进行展示，但如果是一个对象，只能拿到key值，无法进行展示")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/object%E6%97%A0%E6%B3%95%E4%BD%9C%E4%B8%BAchild.png",alt:"image-20210322141300829"}})])])]),t._v(" "),a("h3",{attrs:{id:"三大核心属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大核心属性"}},[t._v("#")]),t._v(" 三大核心属性")]),t._v(" "),a("p",[a("strong",[t._v("组件实例的属性")]),t._v("，意味着"),a("a",{attrs:{href:"#%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6"}},[t._v("函数组件")]),t._v("没有这些属性")]),t._v(" "),a("h4",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" state")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("state是组件对象最重要的属性，值是对象（可以包含多个key-value的组合）")])]),t._v(" "),a("li",[a("p",[t._v("组件被称为状态机，通过更新组件的state来更新对应的页面显示（重新渲染组件）")])]),t._v(" "),a("li",[a("p",[t._v("组件中render方法中的this为组件实例对象")])]),t._v(" "),a("li",[a("p",[t._v("组件自定义的方法中this为undefined，如何解决？")]),t._v(" "),a("ul",[a("li",[t._v("a.强制绑定this:通过函数对象的bind()")]),t._v(" "),a("li",[t._v("b.箭头函数")])])]),t._v(" "),a("li",[a("p",[t._v("不能直接修改或更新状态数据，用setState")])])]),t._v(" "),a("h4",{attrs:{id:"props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[t._v("#")]),t._v(" props")]),t._v(" "),a("ul",[a("li",[t._v("每个组件对象都会有props属性")]),t._v(" "),a("li",[t._v("组件标签的所有属性都保存在props中")]),t._v(" "),a("li",[t._v("props的作用：通过标签属性从组件外向组件内传递变化的数据")]),t._v(" "),a("li",[t._v("组件内部不要修改props数据")]),t._v(" "),a("li",[t._v("给props加限制：prop-types库")])]),t._v(" "),a("h4",{attrs:{id:"refs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refs"}},[t._v("#")]),t._v(" refs")]),t._v(" "),a("p",[a("strong",[t._v("获取元素的真实DOM对象。")])]),t._v(" "),a("blockquote",[a("p",[t._v("尽量减少在React中操作原生的DOM对象，如果实在非得操作也尽量是那些不会对数据产生影响的操作，像是设置焦点、读取信息等。")])]),t._v(" "),a("p",[t._v("​\t定义ref的三种方式")]),t._v(" "),a("ol",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<input ref='inputRef' />\n\nthis.refs.inputRef\n")])])])]),t._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("this.inputRef = React.createRef();\n<input ref={this.inputRef} />\n")])])])]),t._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("回调ref\n<input ref={ref=this.inputRef = ref} />\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"与html的差异"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与html的差异"}},[t._v("#")]),t._v(" 与HTML的差异")]),t._v(" "),a("ol",[a("li",[t._v("class——className")]),t._v(" "),a("li",[t._v("style属性：CSS——JS对象")])]),t._v(" "),a("h3",{attrs:{id:"生命周期-钩子函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期-钩子函数"}},[t._v("#")]),t._v(" 生命周期（钩子函数）")]),t._v(" "),a("p",[t._v("https://zh-hans.reactjs.org/docs/react-component.html#")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("constructor就可以拿到refs和定义的事件\n")])])]),a("h4",{attrs:{id:"主要的钩子函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要的钩子函数"}},[t._v("#")]),t._v(" 主要的钩子函数")]),t._v(" "),a("ul",[a("li",[t._v("挂载：constructor、getDerivedStateFromProps、render、componentDidMount")]),t._v(" "),a("li",[t._v("更新：getDerivedStateFromProps、shouldComponentUpdate、render、getSnapshotBeforeUpdate、componentDidUpdate")]),t._v(" "),a("li",[t._v("卸载：componentDidUnmount")]),t._v(" "),a("li",[t._v("错误处理：getDerivedStateFromError、componentDidCatch")]),t._v(" "),a("li",[t._v("过时方法：UNSAFE_componentWillMount、UNSAFE_componentWillReceiveProps、UNSAFE_componentWillUpdate，在"),a("strong",[t._v("react17")]),t._v("版本后会被弃用，"),a("strong",[t._v("但现在仍可以使用")])])]),t._v(" "),a("p",[t._v("**副作用：**一个函数在执行过程中产生了外部可观察的变化。比如：修改全局变量，修改传参，console.log()等外部可观察它的变化。")]),t._v(" "),a("h5",{attrs:{id:"常见方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见方法"}},[t._v("#")]),t._v(" 常见方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("constructor")]),t._v("：通过super来绑定组件身上的props，只在挂载时执行一次")]),t._v(" "),a("li",[a("code",[t._v("componentDidMount")]),t._v("：一般在这个函数中进行"),a("strong",[t._v("异步的")]),t._v("数据获取")]),t._v(" "),a("li",[a("code",[t._v("render")]),t._v("：渲染页面，挂载、更新时都会触发")]),t._v(" "),a("li",[a("code",[t._v("shouldComponentUpdate")]),t._v("：是否进行更新，如果返回false，则不会触发render")]),t._v(" "),a("li",[a("code",[t._v("componentDidUpdate")]),t._v("：组件开始重新渲染之前调用(TODO: 这个钩子可以做什么？)")]),t._v(" "),a("li",[a("code",[t._v("componentDidUnmount")]),t._v("：组件卸载时触发，一般用来重置数据、清除定时器、移除监听")])]),t._v(" "),a("h5",{attrs:{id:"错误边界-error-boundaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误边界-error-boundaries"}},[t._v("#")]),t._v(" 错误边界（Error Boundaries）")]),t._v(" "),a("p",[t._v("在子组件树种的任何位置捕获JS错误，"),a("strong",[t._v("它无法捕获其自身的错误")])]),t._v(" "),a("p",[a("strong",[t._v("只有class组件才可以成为错误边界组件")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("getDerivedStateFromError")]),t._v("：从错误中获取 "),a("code",[t._v("state")]),t._v("，渲染备用 UI （在render中自定义降级后的备用UI）")]),t._v(" "),a("li",[a("code",[t._v("componentDidCatch")]),t._v("：捕获错误并进行处理，比如打印错误、上报服务器")])]),t._v(" "),a("h5",{attrs:{id:"react16新增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react16新增"}},[t._v("#")]),t._v(" react16新增")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("getDerivedStateFromProps")]),t._v("：在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 "),a("code",[t._v("null")]),t._v(" 则不更新任何内容。此方法适用于罕见的用例，即 "),a("strong",[t._v("state 的值在任何时候都取决于 props")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("开发中遇到的实例：从不同页面进到同一个页面进行数据初始化的时候，state的值取决于props\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("getSnapshotBeforeUpdate")]),t._v("：在最近一次渲染输出（提交到 DOM 节点）之前调用。它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 "),a("code",[t._v("componentDidUpdate")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class ScrollingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 我们是否在 list 中添加新的 items ？\n    // 捕获滚动位置以便我们稍后调整滚动位置。\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 如果我们 snapshot 有值，说明我们刚刚添加了新的 items，\n    // 调整滚动位置使得这些新 items 不会将旧的 items 推出视图。\n    //（这里的 snapshot 是 getSnapshotBeforeUpdate 的返回值）\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n")])])])])]),t._v(" "),a("h5",{attrs:{id:"废弃方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#废弃方法"}},[t._v("#")]),t._v(" 废弃方法")]),t._v(" "),a("p",[t._v("在React17之前，这些方法仍然有效，这几个生命周期之前的函数名没有UNSAFE_前缀。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("UNSAFE_componentWillMount")]),t._v("：在挂载之前被调用。它在 "),a("code",[t._v("render()")]),t._v(" 之前调用，因此在此方法中同步调用 "),a("code",[t._v("setState()")]),t._v(" 不会触发额外渲染。通常，我们建议使用 "),a("code",[t._v("constructor()")]),t._v(" 来初始化 state。"),a("strong",[t._v("此方法是服务端渲染唯一会调用的生命周期函数。")])]),t._v(" "),a("li",[a("code",[t._v("UNSAFE_componentWillReceiveProps")]),t._v("："),a("code",[t._v("getDerivedStateFromProps")])]),t._v(" "),a("li",[a("code",[t._v("UNSAFE_componentWillUpdate")]),t._v("：当组件收到新的 props 或 state 时，会在渲染之前调用，初始渲染不会调用此方法。\n"),a("ul",[a("li",[t._v("此方法中不能调用 "),a("code",[t._v("this.setState()")]),t._v("；")]),t._v(" "),a("li",[t._v("返回之前，也不应该执行任何其他操作触发对 React 组件的更新")])])])]),t._v(" "),a("h4",{attrs:{id:"钩子函数调用顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数调用顺序"}},[t._v("#")]),t._v(" "),a("strong",[t._v("钩子函数调用顺序")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:"react生命周期"}})]),t._v(" "),a("h4",{attrs:{id:"手动调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动调用"}},[t._v("#")]),t._v(" 手动调用")]),t._v(" "),a("p",[t._v("上述的钩子函数是React机制主动调用的方法，还有两种方法可以触发钩子函数："),a("code",[t._v("setState")]),t._v("和"),a("code",[t._v("forceUpdate")])]),t._v(" "),a("p",[t._v("调用 "),a("code",[t._v("forceUpdate 将致使组件调用")]),t._v("render方法，此操作会跳过该组件的 "),a("code",[t._v("shouldComponentUpdate。但其子组件会触发正常的生命周期方法，包括")]),t._v("shouldComponentUpdate` 方法。如果标记发生变化，React 仍将只更新 DOM。")]),t._v(" "),a("p",[t._v("// TODO")]),t._v(" "),a("h4",{attrs:{id:"原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理解析"}},[t._v("#")]),t._v(" 原理解析")]),t._v(" "),a("h3",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),a("blockquote",[a("p",[t._v("定义组件有两个要求")]),t._v(" "),a("ol",[a("li",[t._v("组件名称必须以大写字母开头")]),t._v(" "),a("li",[t._v("组件返回值只能有"),a("strong",[t._v("一个")]),t._v("根元素")])])]),t._v(" "),a("p",[a("strong",[t._v("props默认值")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n\thistory: {}, // 就是history对象\n\tlocation: {},\n\tmatch: {\n\t\tparam: {\n\t\t\ttitle: "abc"\n\t\t}\n\t\tpath: "/page/:title"\n\t\turl: "/page/abc"\n\t}\n}\n')])])]),a("h4",{attrs:{id:"类组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类组件"}},[t._v("#")]),t._v(" 类组件")]),t._v(" "),a("p",[t._v("可以定义生命周期钩子函数，render是其中必须要实现的方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Welcome extends React.Component {\n  render() {\n    return (\n      <h1>Welcome { this.props.name }</h1>\n    );\n  }\n}\nReactDOM.render(<Welcome name='react' />, document.getElementById('root'));\n")])])]),a("h4",{attrs:{id:"函数组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组件"}},[t._v("#")]),t._v(" 函数组件")]),t._v(" "),a("p",[t._v("函数组件接收一个单一的 "),a("code",[t._v("props")]),t._v(" 对象并返回了一个React元素")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Welcome (props) {\n  return <h1>Welcome {props.name}</h1>\n}\nReactDOM.render(<Welcome name='react' />, document.getElementById('root'));\n\n")])])]),a("p",[a("strong",[t._v("区别")])]),t._v(" "),a("ol",[a("li",[t._v("函数组件的性能比类组件的性能要高。因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。为了提高性能，尽量使用函数组件。")]),t._v(" "),a("li",[t._v("函数组件写法比较简单，没有this、state、生命周期（因为函数式组件没有继承React.Component，由于生命周期函数是React.Component类的方法实现的，所以没继承这个类，自然就没法使用生命周期函数了）。对于不需要state和生命周期函数调用的组件可使用函数组件。")]),t._v(" "),a("li",[t._v("函数组件没有生命周期、state的问题可以通过React Hook解决")])]),t._v(" "),a("h5",{attrs:{id:"相关知识点-严格模式下this的指向问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关知识点-严格模式下this的指向问题"}},[t._v("#")]),t._v(" 相关知识点--严格模式下this的指向问题")]),t._v(" "),a("ol",[a("li",[t._v("非严格模式下默认指向window")]),t._v(" "),a("li",[t._v("严格模式下传null指向null，不传或者传undefined都指向undefined。在函数组件中，this==undefined")])]),t._v(" "),a("h4",{attrs:{id:"组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[t._v("#")]),t._v(" 组件通信")]),t._v(" "),a("h5",{attrs:{id:"父子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子"}},[t._v("#")]),t._v(" 父子")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("父->子：props")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/%E7%88%B6%E4%BC%A0%E5%AD%90.jpg",alt:"父传子"}})])]),t._v(" "),a("li",[a("p",[t._v("子->父：父组件将一个函数作为props传给子组件，子组件通过this.props.xxx(args)传值，与vue中的$emit类似")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/%E5%AD%90%E4%BC%A0%E7%88%B6.jpg",alt:"子传父"}})])])]),t._v(" "),a("h5",{attrs:{id:"兄弟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兄弟"}},[t._v("#")]),t._v(" 兄弟")]),t._v(" "),a("p",[t._v("兄弟组件之间的传值，是通过父组件做的中转 ，流程为："),a("strong",[t._v("组件A")]),t._v(" -- "),a("code",[t._v("传值")]),t._v(" --\x3e "),a("strong",[t._v("父组件")]),t._v(" -- "),a("code",[t._v("传值")]),t._v(" --\x3e "),a("strong",[t._v("组件B")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC.jpg",alt:"兄弟组件传值"}})]),t._v(" "),a("h5",{attrs:{id:"跨级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨级"}},[t._v("#")]),t._v(" 跨级")]),t._v(" "),a("h6",{attrs:{id:"props层层传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props层层传递"}},[t._v("#")]),t._v(" "),a("strong",[t._v("props层层传递")])]),t._v(" "),a("p",[t._v("组件嵌套过深时，不建议使用这种方式")]),t._v(" "),a("h6",{attrs:{id:"redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux"}},[t._v("#")]),t._v(" "),a("strong",[a("a",{attrs:{href:"#Redux"}},[t._v("redux")])])]),t._v(" "),a("h6",{attrs:{id:"context对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context对象"}},[t._v("#")]),t._v(" context对象")]),t._v(" "),a("p",[t._v("https://react.docschina.org/docs/context.html#reactcreatecontext")]),t._v(" "),a("p",[a("strong",[t._v("React context的局限性")])]),t._v(" "),a("ol",[a("li",[t._v("在组件树中，如果中间某一个组件 ShouldComponentUpdate中 return false ，会阻碍 context 的正常传值，导致子组件无法获取更新。")]),t._v(" "),a("li",[t._v("组件本身 extends React.PureComponent 也会阻碍 context 的更新。")])]),t._v(" "),a("blockquote",[a("p",[t._v("​\tPureComponent会对"),a("code",[t._v("props")]),t._v("和"),a("code",[t._v("state")]),t._v("进行浅比较，跳过不必要的更新，提高组件性能。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// context在如下的生命周期钩子中可以使用\nconstructor(props, context)\ncomponentWillReceiveProps(nextProps, nextContext)\nshouldComponentUpdate(nextProps, nextState, nextContext)\ncomponentWillUpdate(nextProps, nextState, nextContext)\ncomponentDidUpdate(prevProps, prevState, prevContext)\n")])])]),a("ul",[a("li",[a("p",[t._v("老版本的context")]),t._v(" "),a("ul",[a("li",[t._v("getChildContext 根组件中声明，一个函数，返回一个对象，就是context")]),t._v(" "),a("li",[t._v("childContextTypes 根组件中声明，指定context的结构类型，如不指定，会产生错误")]),t._v(" "),a("li",[t._v("contextTypes 子孙组件中声明，指定要接收的context的结构类型，可以只是context的一部分结构。contextTypes 没有定义，context将是一个空对象。")]),t._v(" "),a("li",[t._v("this.context 在子孙组件中通过此来获取上下文")])])]),t._v(" "),a("li",[a("p",[t._v("新版本的context")]),t._v(" "),a("p",[t._v("新版本的React context使用了Provider和Customer模式，和react-redux的模式非常像。")]),t._v(" "),a("ul",[a("li",[t._v("在顶层的Provider中传入value，")]),t._v(" "),a("li",[t._v("在子孙级的Consumer中获取该值，并且能够传递函数，用来修改context")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//创建Context组件\nconst ThemeContext = React.createContext({\n  theme: 'dark',\n  toggle: () => {}, //向上下文设定一个回调方法\n});\n\n//运行APP\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => { //设定toggle方法，会作为context参数传递\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n\n    this.state = {\n      theme: themes.light,\n      toggle: this.toggle,\n    };\n  }\n\n  render() {\n    return (\n      <ThemeContext.Provider value={this.state}> //state包含了toggle方法\n        <Content />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n//中间组件\nfunction Content() {\n  return (\n    <div>\n      <Button />\n    </div>\n  );\n}\n\n//接收组件\nfunction Button() {\n  return (\n    <ThemeContext.Consumer>\n      {({theme, toggle}) => (\n        <button\n          onClick={toggle} //调用回调\n          style={{backgroundColor: theme}}>\n          Toggle Theme\n        </button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n")])])])])]),t._v(" "),a("h6",{attrs:{id:"pubsub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pubsub"}},[t._v("#")]),t._v(" "),a("strong",[t._v("Pubsub")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// A.js  父组件\nimport React, { Component } from "react";\nimport PubSub from "pubsub-js";\nimport B from "./B";\n\nexport default class A extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: "none",\n    };\n  }\n  componentDidMount() {\n    this.pubsub_token = PubSub.subscribe(\n      "PubSubmessage",\n      function (topic, message) {\n        console.log("topic", topic);\n        this.setState({\n          message,\n        });\n      }.bind(this)\n    );\n  }\n  componentWillUnmount() {\n    PubSub.unsubscribe(this.pubsub_token);\n  }\n  render() {\n    return (\n      <div>\n        <B></B>\n        <div style={{ marginTop: "1.5em" }}>{this.props.children}</div>\n        <div style={{ marginTop: "1.5em" }}>\n          page A message:{this.state.message}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n// B.js  子组件\nimport React, { Component } from "react";\nimport PubSub from "pubsub-js";\nimport C from "./C";\n\nexport default class B extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      increase: "B页面传值---------increase",\n      decrease: "B页面传值---------decrease",\n    };\n  }\n  buttonIncrease() {\n    PubSub.publish("PubSubmessage", this.state.increase);\n  }\n  buttonDecrease() {\n    PubSub.publish("PubSubmessage", this.state.decrease);\n  }\n  render() {\n    return (\n      <div style={{ color: "red" }}>\n        Page B: font color is Red\n        <br />\n        This is Page B. Some state changes:\n        <button onClick={this.buttonIncrease.bind(this)}>Increase</button>\n        <button onClick={this.buttonDecrease.bind(this)}>Decrease</button>\n        <C></C>\n      </div>\n    );\n  }\n}\n\n// C.js  孙子组件\nimport React, { Component } from "react";\nimport PubSub from "pubsub-js";\nexport default class C extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      increase: "C页面传值---------increase",\n      decrease: "C页面传值---------decrease",\n    };\n  }\n  buttonIncrease() {\n    PubSub.publish("PubSubmessage", this.state.increase);\n  }\n  buttonDecrease() {\n    PubSub.publish("PubSubmessage", this.state.decrease);\n  }\n  render() {\n    return (\n      <div>\n        This is Page C. Some state changes:\n        <button onClick={this.buttonIncrease.bind(this)}>Increase</button>\n        <button onClick={this.buttonDecrease.bind(this)}>Decrease</button>\n      </div>\n    );\n  }\n}\n')])])]),a("h5",{attrs:{id:"非嵌套组件通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非嵌套组件通信"}},[t._v("#")]),t._v(" 非嵌套组件通信")]),t._v(" "),a("p",[a("strong",[t._v("自定义事件EventEmitter")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm install events --save\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 定义函数\nemitter.addListener(funcName, func(args){})\n\n// 调用函数传值\nemitter.emit(funcName, args)\n")])])]),a("h3",{attrs:{id:"事件处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[t._v("#")]),t._v(" 事件处理")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("在 React 中另一个不同点是你不能通过返回 "),a("code",[t._v("false")]),t._v(" 的方式阻止默认行为。你必须显式的使用 "),a("code",[t._v("preventDefault")]),t._v(" 。")]),t._v(" "),a("li",[t._v("class 的方法默认不会"),a("a",{attrs:{href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind",target:"_blank",rel:"noopener noreferrer"}},[t._v("绑定"),a("OutboundLink")],1),t._v(" "),a("code",[t._v("this")]),t._v("。如果你忘记绑定 "),a("code",[t._v("this.handleClick")]),t._v(" 并把它传入了 "),a("code",[t._v("onClick")]),t._v("，当你调用这个函数的时候 "),a("code",[t._v("this")]),t._v(" 的值为 "),a("code",[t._v("undefined")])])])]),t._v(" "),a("h4",{attrs:{id:"绑定事件的几种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件的几种方法"}},[t._v("#")]),t._v(" 绑定事件的几种方法")]),t._v(" "),a("h5",{attrs:{id:"在构造函数中使用bind绑定this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在构造函数中使用bind绑定this"}},[t._v("#")]),t._v(" 在构造函数中使用bind绑定this")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// render\n<button onClick={this.handleClick}>\n// constructor\nthis.handleClick = this.handleClick.bind(this);\n")])])]),a("h5",{attrs:{id:"在调用的时候使用bind绑定this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在调用的时候使用bind绑定this"}},[t._v("#")]),t._v(" 在调用的时候使用bind绑定this")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// render\n<button onClick={this.handleClick.bind(this)}>\n")])])]),a("h5",{attrs:{id:"在调用的时候使用箭头函数绑定this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在调用的时候使用箭头函数绑定this"}},[t._v("#")]),t._v(" 在调用的时候使用箭头函数绑定this")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// render\n<button onClick={() => this.handleClick()}>\n")])])]),a("h5",{attrs:{id:"函数定义使用箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数定义使用箭头函数"}},[t._v("#")]),t._v(" 函数定义使用箭头函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// render\n<button onClick={this.handleClick}>\n// 事件定义\nhandleClick = () => {\n// 这里的this是组件的this\n}\n")])])]),a("h4",{attrs:{id:"事件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件流"}},[t._v("#")]),t._v(" 事件流")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("React")]),t._v("的事件处理系统中，默认的事件流就是冒泡，如果希望以捕获的方式来触发事件的话，可以使用"),a("code",[t._v("onClickCapture")]),t._v("来绑定事件，也就是在事件类型后面加一个后缀"),a("code",[t._v("Capture")])]),t._v(" "),a("h2",{attrs:{id:"protal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protal"}},[t._v("#")]),t._v(" protal")]),t._v(" "),a("p",[t._v("通过ReactDOM中的createPortal()方法，可以在渲染元素时将元素渲染到网页中的指定位置")]),t._v(" "),a("p",[a("strong",[t._v("使用情况")])]),t._v(" "),a("blockquote",[a("p",[t._v("需要在React中添加一个会盖住其他元素的Backdrop组件，Backdrop显示后，页面中所有的元素都会被遮盖。很显然这里需要用到定位，但是如果将遮罩层直接在当前组件中渲染的话，遮罩层会成为当前组件的后代元素。如果此时，当前元素后边的兄弟元素中有开启定位的情况出现，且层级不低于当前元素时，便会出现盖住遮罩层的情况。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const backdropDOM = document.getElementById('backdrop');\n\nconst Backdrop = () => {\n  return ReactDOM.createPortal(\n  <div\n           style={\n      {\n        position:'fixed',\n        top:0,\n        bottom:0,\n        left:0,\n        right:0,\n        zIndex:9999,\n        background:'rgba(0,0,0,.3)'\n      }\n    }\n           >\n  </div>,\n      backdropDOM\n  );\n};\n// Backdrop会直接渲染到网页中id为backdrop的div中\n")])])]),a("h2",{attrs:{id:"全家桶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全家桶"}},[t._v("#")]),t._v(" 全家桶")]),t._v(" "),a("h3",{attrs:{id:"router"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[t._v("#")]),t._v(" Router")]),t._v(" "),a("h4",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),a("h5",{attrs:{id:"browserrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#browserrouter"}},[t._v("#")]),t._v(" BrowserRouter")]),t._v(" "),a("p",[t._v("Router的一种，通过使用HTML5提供的history API机制来维持页面UI通URL的统一")]),t._v(" "),a("p",[a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("basename")]),t._v("：该路由路径的base url。有前置斜杠，不能有后置斜杠。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<BrowserRouter basename="/calendar"/>\n<Link to="/today"/> // renders <a href="/calendar/today">\n')])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("getUserCOnfirmation")]),t._v("：路由跳转的二次确认函数，用来拦截Prompt组件，默认情况下使用window.confirm弹框  "),a("strong",[t._v("需要配合Prompt一起使用，没有Prompt不会弹出")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("forceRefresh")]),t._v("：布尔值。为true时, router在进行路由跳转的时候会进行页面刷新。"),a("strong",[t._v("可能只在浏览器不支持H5 history api的情况下需要使用。")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("keyLength")]),t._v("：自定义location.key的长度，默认为6  "),a("strong",[t._v("？？？？？？？")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("children")]),t._v("：需要渲染的"),a("strong",[t._v("单个reactNode元素组件")])])])]),t._v(" "),a("h5",{attrs:{id:"hashrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashrouter"}},[t._v("#")]),t._v(" HashRouter")]),t._v(" "),a("p",[t._v("通过URL hash部分，如location.hash来保持UI同URL一致。")]),t._v(" "),a("p",[a("strong",[t._v("hashRouter一般用于低版本浏览器，在较高版本浏览器中推荐配置服务器端使用browserHistory")])]),t._v(" "),a("p",[a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("basename")])]),t._v(" "),a("li",[a("code",[t._v("getUserConfirmation")])]),t._v(" "),a("li",[a("code",[t._v("hashType")]),t._v("：string，\n"),a("ul",[a("li",[t._v('"slash"- 创建像#/和的哈希#/sunshine/lollipops，默认')]),t._v(" "),a("li",[t._v('"noslash"- 创建像#和的哈希#sunshine/lollipops')])])]),t._v(" "),a("li",[a("code",[t._v("children")])])]),t._v(" "),a("h5",{attrs:{id:"link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[t._v("#")]),t._v(" Link")]),t._v(" "),a("p",[t._v("进入页面路由的链接\n"),a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("to")])]),t._v(" "),a("li",[a("code",[t._v("replace")]),t._v("： 布尔值- 为true时，将会替换history stack中的当前路径")])]),t._v(" "),a("h5",{attrs:{id:"navlink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#navlink"}},[t._v("#")]),t._v(" NavLink")]),t._v(" "),a("p",[a("code",[t._v("<Link>")]),t._v(" 的特殊版本，当匹配当前URL时，会给当前link添加样式。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("activeClassName")]),t._v("：选中时添加的类名，默认为"),a("code",[t._v("active")])]),t._v(" "),a("li",[a("code",[t._v("activeStyle")]),t._v("：对象，样式")]),t._v(" "),a("li",[a("code",[t._v("exact")])]),t._v(" "),a("li",[a("code",[t._v("strict")]),t._v("：布尔值，为true时，当进行路由匹配时，后置斜杠将会被考虑在内")]),t._v(" "),a("li",[a("code",[t._v("isActive")]),t._v("：func。额外函数来进一步验证当前路由是否匹配")])]),t._v(" "),a("h5",{attrs:{id:"route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[t._v("#")]),t._v(" Route")]),t._v(" "),a("p",[t._v("React router中最重要的模块，主要职责是当location匹配路由时，会将UI "),a("strong",[t._v("render")]),t._v("出来。")]),t._v(" "),a("p",[a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("to")]),t._v("： string, url地址")]),t._v(" "),a("li",[a("code",[t._v("to")]),t._v("： object,\n"),a("ul",[a("li",[a("code",[t._v("pathname")]),t._v("：跳转路径")]),t._v(" "),a("li",[a("code",[t._v("search")]),t._v("：查询参数")]),t._v(" "),a("li",[a("code",[t._v("hash")]),t._v("：url中的hash, eg. #a-hash,")]),t._v(" "),a("li",[a("code",[t._v("state")]),t._v("：存储到location中的额外状态数据. location中的state可以在redirect跳转组件的"),a("code",[t._v("this.props.location.state")]),t._v("访问")])])]),t._v(" "),a("li",[a("code",[t._v("push")]),t._v("： 为true表示redirect path将往history stack中推一条新数据而不是替换")]),t._v(" "),a("li",[a("code",[t._v("from")]),t._v("： redirect from url, 会进行正则匹配。只能用在"),a("code",[t._v("<Switch>")]),t._v("中")]),t._v(" "),a("li",[a("code",[t._v("exact")]),t._v("： bool, 精准匹配")]),t._v(" "),a("li",[a("code",[t._v("strict")]),t._v("： bool, 严格模式，后斜杠将考虑在内")])]),t._v(" "),a("h5",{attrs:{id:"redirect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redirect"}},[t._v("#")]),t._v(" Redirect")]),t._v(" "),a("p",[t._v("使用redirect将跳转到一个新的路由，新的location将会覆盖history stack中的当前location.")]),t._v(" "),a("p",[t._v("使用场景：初始化时默认选中一个路由")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<Redirect to="/xxx" />\n')])])]),a("h5",{attrs:{id:"switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[t._v("#")]),t._v(" Switch")]),t._v(" "),a("p",[t._v("渲染"),a("code",[t._v("Route")]),t._v("或"),a("code",[t._v("Redirect")]),t._v("中第一个匹配location的组件，且子元素只能为"),a("code",[t._v("Route")]),t._v("或"),a("code",[t._v("Redirect")])]),t._v(" "),a("p",[t._v("避免：不使用Switch时，如果有两个组件的path是同一个值，会同时展示（会一直匹配到最后一个Link，如果to一样，就显示）")]),t._v(" "),a("p",[t._v("好处：使用Switch后，匹配到之后就不再继续之后的匹配，一般路径和组件是一一对应的，提高渲染效率")]),t._v(" "),a("p",[a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("location")]),t._v("：Object")]),t._v(" "),a("li",[a("code",[t._v("children")]),t._v("： 只能为"),a("code",[t._v("Route")]),t._v("或"),a("code",[t._v("Redirect")])])]),t._v(" "),a("h5",{attrs:{id:"prompt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prompt"}},[t._v("#")]),t._v(" Prompt")]),t._v(" "),a("p",[t._v("当想阻止用户跳转路由，可以使用"),a("code",[t._v("prompt")]),t._v("提示用户是否跳转")]),t._v(" "),a("p",[a("strong",[t._v("props")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("message")]),t._v("：提示的信息")]),t._v(" "),a("li",[a("code",[t._v("when")]),t._v("：布尔值，true表示弹出跳转提示框")])]),t._v(" "),a("h5",{attrs:{id:"memoryrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memoryrouter"}},[t._v("#")]),t._v(" MemoryRouter")]),t._v(" "),a("p",[a("code",[t._v("Router")]),t._v("一种, 将url history保存在内存中，不可再页面地址栏中读取，通常用于测试或者非浏览器的环境，如react native")]),t._v(" "),a("h5",{attrs:{id:"staticrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#staticrouter"}},[t._v("#")]),t._v(" StaticRouter")]),t._v(" "),a("p",[t._v("静态路由，页面的location 将不会改变。一般用于服务器端。")]),t._v(" "),a("h5",{attrs:{id:"withrouter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withrouter"}},[t._v("#")]),t._v(" withRouter")]),t._v(" "),a("p",[a("code",[t._v("withRouter")]),t._v("的作用就是，如果我们某个东西不是一个"),a("code",[t._v("Router")]),t._v("，但是我们要依靠它去跳转一个页面，比如点击页面的logo 这时候就可以使用"),a("code",[t._v("withRouter")]),t._v("来做。")]),t._v(" "),a("p",[a("strong",[t._v("使用")])]),t._v(" "),a("p",[t._v("将一个组件包裹进"),a("code",[t._v("Route")]),t._v("里面, 然后"),a("code",[t._v("react-router")]),t._v("的三个对象"),a("code",[t._v("history, location, match")]),t._v("就会被放进这个组件的"),a("code",[t._v("props")]),t._v("属性中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class Nav extends React.Component {\n    constructor(){//跳转到\n    \tsuper(props);\n     \tconsole.log(this.props)\n    }\n    render() {\n        return (\n        \t<div>{this.props.xxx}</div>\n        );\n    }\n}\nexport default withRouter(Nav);\n")])])]),a("p",[a("img",{attrs:{src:"/notes/imgs/react/image-20201221104523737.png",alt:"image-20201221104523737"}})]),t._v(" "),a("h4",{attrs:{id:"路由组件传参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由组件传参"}},[t._v("#")]),t._v(" 路由组件传参")]),t._v(" "),a("h5",{attrs:{id:"params"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#params"}},[t._v("#")]),t._v(" params")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 注册\n<Route path={`${path}/:id/:msg`} />\n// 传参\n<Link to={`${path}/123/456`} component={xxx}/>\n// 接收\nthis.props.match.params\n// 结果\nid=123  msg=456\n")])])]),a("h5",{attrs:{id:"search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#search"}},[t._v("#")]),t._v(" search")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 注册\n<Route path={`${path}`} />\n// 传参\n<Link to={`${path}/?id=123&msg=456`} component={xxx}/>\n// 接收,通过插件querystring进行转换\nthis.props.location.search\n// 结果\nid=123  msg=456\n")])])]),a("h5",{attrs:{id:"state-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-2"}},[t._v("#")]),t._v(" state")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 传参\n<Link to={{path:`${path}/?id=123&msg=456`,state:{id:123,msg:456}}} component={xxx}}/>\n// 注册\n<Route path={`${path}`} />\n// 接收,通过插件querystring进行转换\nthis.props.location.state\n")])])]),a("h4",{attrs:{id:"路由跳转改为replace模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由跳转改为replace模式"}},[t._v("#")]),t._v(" 路由跳转改为replace模式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<Route path={`${path}`} replace/>\n")])])]),a("h4",{attrs:{id:"编程式路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程式路由"}},[t._v("#")]),t._v(" 编程式路由")]),t._v(" "),a("h5",{attrs:{id:"push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push")]),t._v(" "),a("blockquote",[a("p",[t._v("向history栈里面添加一条新记录")])]),t._v(" "),a("h5",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[t._v("#")]),t._v(" replace")]),t._v(" "),a("blockquote",[a("p",[t._v("不会向 history 添加新记录")])]),t._v(" "),a("h5",{attrs:{id:"go"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#go"}},[t._v("#")]),t._v(" go")]),t._v(" "),a("p",[a("code",[t._v("go(num)")])]),t._v(" "),a("blockquote",[a("p",[t._v("大于0时：加载history中num个之后的URL")]),t._v(" "),a("p",[t._v("小于0时：加载history中num个之前的URL")])]),t._v(" "),a("h5",{attrs:{id:"goback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goback"}},[t._v("#")]),t._v(" goBack")]),t._v(" "),a("blockquote",[a("p",[t._v("加载history中前一个的URL")])]),t._v(" "),a("h5",{attrs:{id:"gofoward"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gofoward"}},[t._v("#")]),t._v(" goFoward")]),t._v(" "),a("blockquote",[a("p",[t._v("加载history中下一个的URL")])]),t._v(" "),a("h3",{attrs:{id:"router6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router6"}},[t._v("#")]),t._v(" Router6")]),t._v(" "),a("h4",{attrs:{id:"钩子函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[t._v("#")]),t._v(" 钩子函数")]),t._v(" "),a("h6",{attrs:{id:"usenavigate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usenavigate"}},[t._v("#")]),t._v(" useNavigate")]),t._v(" "),a("blockquote",[a("p",[t._v("编程式的路由跳转")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("navigate(pathname[,{replace: true, state: xxx}])\n// pathname: 跳转路径\n// pathname?key=value: search方式传参\n// pathname/value: params方式传参，需要修改路由的path为'/login/:key'\n// replace: true history.replceState，不设置时默认为history.pushState\n// state: 传递state参数\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function App() {\n\tconst navigate = useNavigate();\n\t\n\tconst jumpLogin = () => {\n\t\tnavigate('/login')\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={jumpLogin}></button>\n\t\t</div>\n\t)\n}\n")])])]),a("h6",{attrs:{id:"useparams"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useparams"}},[t._v("#")]),t._v(" useParams")]),t._v(" "),a("blockquote",[a("p",[t._v("获取params参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const params = useParams()\nconsole.log(params.key)\n")])])]),a("h6",{attrs:{id:"usesearchparams"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usesearchparams"}},[t._v("#")]),t._v(" useSearchParams")]),t._v(" "),a("blockquote",[a("p",[t._v("获取search参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const [search, setsearch] = useSearchParams()\nconsole.log(search.get('name'))\nconsole.log(search.get('age'))\n")])])]),a("h6",{attrs:{id:"uselocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uselocation"}},[t._v("#")]),t._v(" useLocation")]),t._v(" "),a("blockquote",[a("p",[t._v("获取state参数")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const state = useLocation()\nconsole.log(state)\n")])])]),a("h6",{attrs:{id:"useroutes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useroutes"}},[t._v("#")]),t._v(" useRoutes")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("路由配置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { Navigate } from 'react-router-dom';\nimport { lazy } from 'react';\n\nimport Home from '@/views/campus';\n\nconst handleLazy = (name: string) => {\n    const Comp = lazy(() => import(`@/views/${name}`));\n    return <Comp />; //element需要传入<Element />这种形式，与component不同\n};\n\nconst routes = [\n    {\n        path: '/',\n        element: <Home />,\n        children: [\n            {\n                path: '',\n                element: handleLazy('overview')\n            },\n            {\n                path: 'overview',\n                element: handleLazy('overview')\n            },\n            {\n                path: 'comprehensive',\n                element: handleLazy('comprehensive')\n            }\n        ]\n    },\n    {\n        path: '/login',\n        element: handleLazy('login')\n    },\n    {\n        path: '/404',\n        element: handleLazy('404')\n    },\n    {\n        path: '*',\n        element: <Navigate to='/404' />\n    }\n];\n\nexport default routes;\n")])])])]),t._v(" "),a("li",[a("p",[t._v("路由使用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function App() {\n    const DRouter = useRoutes(DefaultRouter);\n    return (\n        <Fragment>\n            {DRouter}\n        </Fragment>\n    )\n}\n\n// 二级路由 <Outlet></Outlet>\nimport { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport layoutStyle from './index.module.scss';\n\nimport Menu from './menu';\nimport Side from './side';\n\nfunction Layout() {\n    return (\n        <div className={layoutStyle.layout}>\n            {/* 图表 */}\n            <Side>\n                <Suspense fallback={<h2>Loading..</h2>}><Outlet /></Suspense>\n            </Side>\n            {/* 菜单 */}\n            <Menu />\n        </div>\n    )\n}\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"redux-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-2"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),a("p",[a("strong",[t._v("Redux中的Store修改之后，React不会自动监听，也就是说页面不会重新渲染，需要手动进行监听")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("一般在最外层父组件中进行监听\ncomponentDidMount(){\n\tstore.subscribe(()=>{\n\t\tthis.setState({})\n\t})\n}\n")])])]),a("h4",{attrs:{id:"redux-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-3"}},[t._v("#")]),t._v(" Redux")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import { createStore } from "redux";\nimport { reducer } from "./reducer"\n\nstore = createStore(reducer)\n')])])]),a("h5",{attrs:{id:"store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" store")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/image-20201222150802906.png",alt:"image-20201222150802906"}})]),t._v(" "),a("h5",{attrs:{id:"action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" action")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("actionType")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('export const ADD_TYPE = "ADD_TYPE";\n')])])])]),t._v(" "),a("li",[a("p",[t._v("index")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import * as actionType from "./actionType";\n\nexport const add = (value) => {\n  return {\n    type: actionType.ADD_TYPE,\n    title: "这是 ADD_TYPE action",\n    value,\n  };\n};\n')])])])])]),t._v(" "),a("h5",{attrs:{id:"reducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" reducer")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import * as actionType from "../actionType";\nconst initState = {\n  title: "默认值",\n};\nexport const reducer = (state = initState, action) => {\n  let newState = {};\n  switch (action.type) {\n    case actionType.ADD_TYPE:\n      newState = Object.assign({}, state, action);\n      return newState;\n    default:\n      return state;\n  }\n};\n')])])]),a("h4",{attrs:{id:"react-redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[t._v("#")]),t._v(" React-Redux")]),t._v(" "),a("h5",{attrs:{id:"provider"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),a("blockquote",[a("p",[t._v("用于包裹整个结构，让每一层级的组件都能够获取到store")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<Provider store={store}>\n  <div>\n    <ComA></ComA>\n    <ComB></ComB>\n  </div>\n</Provider>\n")])])]),a("h5",{attrs:{id:"connect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class ComA extends React.Component {}\nexport default connect(mapStateToProps, mapDispatchToProps)(ComA)\n\n// mapStateToProps和mapDispatchToProps是react-redux调用的，参数也是react-redux传的\n// mapStateToProps\nfunction mapStateToProps(state) {\n\treturn state\n}\n\n// mapDispatchToprops\nfunction mapDispatchToprops(dispatch) {\n\t// dispatch里面的add是action里面定义的add\n\tadd: value => dispatch(add(value))\n}\n\n// mapDispatchToprops简写\nlet mapDispatchToprops = {\n\tadd\n}\n")])])]),a("h4",{attrs:{id:"redux-toolkit-rtk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-toolkit-rtk"}},[t._v("#")]),t._v(" Redux-toolkit  (RTK)")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("npm i @reduxjs/toolkit\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { createSlice } from '@reduxjs/toolkit';\n\nexport const counterSlice = createSlice({\n \tname: 'counter', // 命名空间，在调用action的时候会默认的设置为action的前缀\n \t// 初始值\n \tinitialState: {\n \t\tcount: 1,\n \t\ttitle: 'redux toolkit pre',\n  \t},\n     // 这里的属性会自动的导出为actions，在组件中可以直接通过dispatch进行触发\n     reducers: {\n        increment(state, { payload }) {\n            state.count = state.count + payload.step; // 内置了immutable\n        },\n        decrement(state) {\n            state.count -= 1;\n        },\n      },\n});\n\n// 导出actions\nexport const { increment, decrement } = counterSlice.actions;\n\n// 内置了thunk插件，可以直接处理异步请求\nexport const asyncIncrement = (payload) => (dispatch) => {\n     setTimeout(() => {\n     dispatch(increment(payload));\n      }, 2000);\n};\n\nexport default counterSlice.reducer; // 导出reducer，在创建store时使用到\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n\t<Provider store={store}>\n \t\t<App />\n\t</Provider>,\n \tdocument.getElementById('root')\n);\n在组件内部，使用useState和useDispatch可以直接获取state数据与dispatch方法\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, asyncIncrement } from './store/features/counterSlice'; // 引入actions\n\nfunction App() {\n     const { count } = useSelector((state) => state.counter);\n     const dispatch = useDispatch();\n     return (\n         <div className='App'>\n             <button\n                 onClick={() => {\n                    dispatch(increment({ step: 2 })); // dispatch派发action\n                 }}\n             >\n                {count}\n             </button>\n            <hr />\n             <button\n                onClick={() => {\n                    dispatch(asyncIncrement({ step: 1 }));\n                }}\n              >\n                  {count}\n              </button>\n        </div>\n  );\n}\n\nexport default App;\n")])])]),a("h3",{attrs:{id:"mobx-redux-lite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobx-redux-lite"}},[t._v("#")]),t._v(" Mobx-Redux-lite")]),t._v(" "),a("h4",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" mobx mobx-react-lite\n")])])]),a("h4",{attrs:{id:"用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[t._v("#")]),t._v(" 用法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// store/menu.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个store")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    makeAutoObservable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    runInAction\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mobx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" MenuItem "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./types'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuStore")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("menuData")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MenuItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("makeAutoObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMenuData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MenuItem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("runInAction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("menuData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" menuStore "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MenuStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" menuStore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// App.vue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用observer监听store")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" DefaultRouter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@/router'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    useRoutes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useNavigate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" useLocation  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-router-dom'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" observer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mobx-react-lite'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" PubSub "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pubsub-js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" useEffect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" navigate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useNavigate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useLocation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" whiteList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/overview'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("whiteList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("location"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("navigate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听当前 location改变")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// topic: string, route: string")]),t._v("\n    PubSub"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'changeRoute'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("topic")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("route")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("navigate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRoutes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DefaultRouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 store 对象传递给组件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("App"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用store")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" menuStore "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@/store/menu'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmenuStore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setMenuData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"创建可观察状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建可观察状态"}},[t._v("#")]),t._v(" 创建可观察状态")]),t._v(" "),a("ul",[a("li",[t._v("makeObservable")]),t._v(" "),a("li",[t._v("makeAutoObservable：自动推断所有属性")])]),t._v(" "),a("h2",{attrs:{id:"reacthooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reacthooks"}},[t._v("#")]),t._v(" reactHooks")]),t._v(" "),a("blockquote",[a("p",[t._v("在函数组件中使用state，生命周期")])]),t._v(" "),a("ul",[a("li",[t._v("只能用于函数组件或自定义的钩子函数中")]),t._v(" "),a("li",[t._v("只能直接在函数组件中使用，函数组件的方法中不行")])]),t._v(" "),a("h3",{attrs:{id:"常用hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用hooks"}},[t._v("#")]),t._v(" 常用Hooks")]),t._v(" "),a("h4",{attrs:{id:"usestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState")]),t._v(" "),a("p",[a("code",[t._v("const [state, setState] = useState(initialState);")])]),t._v(" "),a("p",[t._v("返回一个state，以及更新state的函数")]),t._v(" "),a("p",[t._v("在初始渲染期间，返回的状态 ("),a("code",[t._v("state")]),t._v(") 与传入的第一个参数 ("),a("code",[t._v("initialState")]),t._v(") 值相同。")]),t._v(" "),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果你的更新函数返回值与当前 state 完全相同，则随后的重渲染会被完全跳过。")])]),t._v(" "),a("li",[a("p",[t._v("与 class 组件中的 "),a("code",[t._v("setState")]),t._v(" 方法不同，"),a("code",[t._v("useState")]),t._v(" 不会自动合并更新对象")]),t._v(" "),a("p",[a("a",{attrs:{href:"#useReducer"}},[t._v("useReducer")]),t._v(" 是另一种可选方案，它更适合用于管理包含多个子值的 state 对象。")])])]),t._v(" "),a("h4",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect")]),t._v(" "),a("p",[a("code",[t._v("useEffect(didUpdate);")])]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("Effect Hook")]),t._v(" 可以让你在函数组件中执行副作用操作")])]),t._v(" "),a("blockquote",[a("p",[t._v("在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。")])]),t._v(" "),a("p",[t._v("副作用操作的例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/react/react-%E5%89%AF%E4%BD%9C%E7%94%A8.png",alt:"image-20230201153745912"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const ThemeContext = React.createContext({\n  theme: 'dark',\n  toggle: () => {}, //向上下文设定一个回调方法\n  clear: () => {}\n});\n\nfunction App() {\n\tconst [theme, setTheme] = useState('dark');\n\tconst toggle = () => setTheme(theme === 'dark' ? 'light' : 'dark');\n\tconst clear = () => setTheme('');\n\treturn (\n\t\t<ThemeContext.Provider value={{theme, toggle, clear}}>\n            <Content />\n          </ThemeContext.Provider>\n    );\n}\n\nfunction Content() {\n    const {toggle, clear, theme} = useContext(ThemeContext);\n    const [count, setCount] = useState(0);\n    if (!theme) setCount(1);\n    return (\n    \t<Fragment>\n    \t\t<button onClick={toggle}>修改theme</button>\n    \t\t<button onClick={clear}>清空theme</button>\n    \t</Fragment>\n    )\n}\n\n// 当theme被清空时，调用了setCount，再一次触发了重新渲染，会重新进入if判断，导致死循环\n")])])]),a("h5",{attrs:{id:"可以作为类似于生命周期使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可以作为类似于生命周期使用"}},[t._v("#")]),t._v(" 可以作为类似于生命周期使用")]),t._v(" "),a("ul",[a("li",[t._v("第一个参数：函数，该函数内的逻辑视为"),a("code",[t._v("componentDidMount")]),t._v("；如果该函数有函数返回值，视为"),a("code",[t._v("componentWillUnmount")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// useEffect返回一个清除函数\nuseEffect(() => {\n  // componentDidMount \n  const subscription = props.source.subscribe();\n  return () => {\n    // componentWillUnmount\n    subscription.unsubscribe();\n  };\n});\n")])])]),a("ul",[a("li",[t._v("第二个参数")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("没有第二个参数：组件的初始化和更新都会执行")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("useEffect(() => {\n  // componentDidMount componentDidUpdate\n  // ...\n});\n")])])])]),t._v(" "),a("li",[a("p",[t._v("空数组：初始化调用一次之后不再执行，相当于componentDidMount")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 解决上面的副作用\n// ...\nfunction Content() {\n    const {\n        toggle, clear, theme \n    } = useContext(ThemeContext);\n    const [count, setCount] = useState(0);\n    useEffect(() => {\n        console.log('useEffect', count)\n        if (!theme) setCount(1);\n    });\n    // ...\n}\n")])])])]),t._v(" "),a("li",[a("p",[t._v("有一个值：初始化时和该值改变时会执行，相当于componentDidMount，componentDidUpdate")])]),t._v(" "),a("li",[a("p",[t._v("有多个值：对比每个值，其中一个有变化时执行")])])]),t._v(" "),a("h4",{attrs:{id:"useref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[t._v("#")]),t._v(" useRef")]),t._v(" "),a("p",[a("code",[t._v("const refContainer = useRef(initialValue);")])]),t._v(" "),a("h5",{attrs:{id:"和createref的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和createref的区别"}},[t._v("#")]),t._v(" 和createRef的区别")]),t._v(" "),a("ul",[a("li",[t._v("createRef会在组件每次渲染的时候重新创建")]),t._v(" "),a("li",[t._v("useRef只会在组件首次渲染时创建")])]),t._v(" "),a("h5",{attrs:{id:"作用于普通组件时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用于普通组件时"}},[t._v("#")]),t._v(" 作用于普通组件时")]),t._v(" "),a("p",[t._v("作用于普通组件时，与createRef的用法是一样的")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { Input, Button } from 'antd';\nimport { useRef, createRef } from 'react';\n\nimport type { InputRef } from 'antd';\n\nconst RefDemo = () => {\n  const inputEL = useRef<InputRef>(null);\n  const inputEL2 = useRef<HTMLInputElement>(null);\n  const inputEL3 = createRef<HTMLInputElement>();\n\n  const getInput = () => {\n    console.log('antd DOM', inputEL.current?.input?.value);\n    console.log('原生 DOM', inputEL2.current?.value);\n    console.log('createRef', inputEL3.current?.value);\n  };\n\n  return (\n    <div>\n      <p>antd Input：<Input ref={inputEL} style={{width: 167}} /></p>\n      <p>原生 Input：<input type=\"text\" ref={inputEL2} /></p>\n      <p>createRef Input：<input type=\"text\" ref={inputEL3} /></p>\n      <p><Button onClick={getInput}>获取Input Value</Button></p>\n    </div>\n  );\n};\n\nexport default RefDemo;\n")])])]),a("h5",{attrs:{id:"调用子组件的方法-获取子组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用子组件的方法-获取子组件"}},[t._v("#")]),t._v(" 调用子组件的方法/获取子组件")]),t._v(" "),a("p",[t._v("需要用到两个方法 "),a("code",[t._v("useImperativeHandle")]),t._v(" 和 "),a("code",[t._v("forwardRef")])]),t._v(" "),a("h6",{attrs:{id:"forwardref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forwardref"}},[t._v("#")]),t._v(" "),a("code",[t._v("forwardRef")])]),t._v(" "),a("blockquote",[a("p",[t._v("引用传递（Ref forwading）是一种通过组件向子组件自动传递 "),a("strong",[t._v("引用ref")]),t._v(" 的技术。对于应用者的大多数组件来说没什么作用。但是对于有些重复使用的组件，可能有用。例如某些input组件，需要控制其focus，本来是可以使用ref来控制，但是因为该input已被包裹在组件中，这时就需要使用Ref forward来透过组件获得该input的引用。")])]),t._v(" "),a("h6",{attrs:{id:"useimperativehandle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useimperativehandle"}},[t._v("#")]),t._v(" "),a("code",[t._v("useImperativeHandle")])]),t._v(" "),a("blockquote",[a("p",[t._v("useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。")]),t._v(" "),a("p",[t._v("在大多数情况下，应当避免使用 ref 这样的命令式代码。")]),t._v(" "),a("p",[t._v("useImperativeHandle 应当与 "),a("strong",[t._v("forwardRef")]),t._v(" 一起使用。")])]),t._v(" "),a("p",[a("code",[t._v("useImperativeHandle(ref, createHandle, [deps])")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 调用子组件的方法\nimport React, { useRef, useImperativeHandle,forwardRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst FancyInput = forwardRef((props, ref) => {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus();\n    }\n  }));\n\n  return <input ref={inputRef} type=\"text\" />\n});\n\nconst App = props => {\n  const fancyInputRef = useRef();\n\n  return (\n    <div>\n      <FancyInput ref={fancyInputRef} />\n      <button\n        onClick={() => fancyInputRef.current.focus()}\n      >父组件调用子组件的 focus</button>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, root);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 获取子组件\nimport React, { useRef,forwardRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst FancyInput = forwardRef((props, ref) => (\n\t<input ref={ref} type=\"text\" value={props.children}/>\n));\n\nconst App = props => {\n  const fancyInputRef = useRef();\n\n  return (\n    <div>\n      <FancyInput ref={fancyInputRef}>hhtest</FancyInput>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, root);\n")])])]),a("h3",{attrs:{id:"其他hooks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他hooks"}},[t._v("#")]),t._v(" 其他Hooks")]),t._v(" "),a("h4",{attrs:{id:"usereducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usereducer"}},[t._v("#")]),t._v(" useReducer")]),t._v(" "),a("p",[a("a",{attrs:{href:"#useState"}},[t._v("useState")]),t._v("的替代方案，在某些场景下，"),a("code",[t._v("useReducer")]),t._v(" 会比 "),a("code",[t._v("useState")]),t._v(" 更适用，例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等。并且，使用 "),a("code",[t._v("useReducer")]),t._v(" 还能给那些会触发深更新的组件做性能优化，因为你可以向子组件传递 "),a("code",[t._v("dispatch")]),t._v(" 而不是回调函数 。")]),t._v(" "),a("p",[t._v("使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {useReducer} from 'react';\n\nfunction App() {\n    const reducer = (state, action) => {\n        switch(action.type){\n            case 'add':\n                return state + 1;\n            case 'sub':\n                return state - 1;\n        }\n    };\n    \n    const [count, countDispath] = useReducer(reducer, 1);\n    \n    return (\n        <div className=\"App\">\n            {count}\n            <div>\n                <button onClick={()=>countDispath({type:'sub'})}>-</button>\n                <button onClick={()=>countDispath({type:'add'})}>+</button>\n            </div>\n        </div>\n    );\n}\n")])])]),a("h4",{attrs:{id:"usememo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[t._v("#")]),t._v(" useMemo")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n")])])]),a("h5",{attrs:{id:"react-memo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-memo"}},[t._v("#")]),t._v(" React.memo")]),t._v(" "),a("p",[t._v("减少不必要的重新渲染，比如App->A->B，当App重新渲染时，A和B都会重新渲染。但B组件没有state、context、props，没有必要每次都重新渲染，此时可以用到"),a("code",[t._v("React.memo")]),t._v("方法")]),t._v(" "),a("p",[t._v("在B组件中使用，"),a("code",[t._v("React.memo(B)")])]),t._v(" "),a("p",[a("strong",[t._v("useMemo和"),a("a",{attrs:{href:"#useCallback"}},[t._v("useCallback")]),t._v("作用和用法是一样的")])]),t._v(" "),a("h4",{attrs:{id:"usecallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" useCallback")]),t._v(" "),a("p",[t._v("用来创建React中的回调函数，该回调函数仅在某个依赖项改变时才会更新")]),t._v(" "),a("p",[a("code",[t._v("useCallback(fn, deps)")]),t._v(" 相当于 "),a("code",[t._v("useMemo(() => fn, deps)")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("第二个参数：不指定时，每次都会更新；指定时，其中某个变化时才会更新")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n")])])]),a("p",[t._v("可以解决"),a("a",{attrs:{href:"#React.memo"}},[t._v("React.memo")]),t._v("的遗留问题，如果B组件中某个按钮点击触发了A组件的事件，A组件更新时，B组件仍然会更新")]),t._v(" "),a("h5",{attrs:{id:"usememo、usecallback的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo、usecallback的区别"}},[t._v("#")]),t._v(" useMemo、useCallback的区别")]),t._v(" "),a("ul",[a("li",[t._v("useCallback 和 useMemo 的区别")])]),t._v(" "),a("p",[t._v("​\t"),a("code",[t._v("useCallback")]),t._v("返回一个函数，当把它返回的这个函数作为子组件使用时，可以避免每次父组件更新时都重新渲染这个子组件；"),a("code",[t._v("useMemo")]),t._v("返回的的是一个值，用于避免在每次渲染时都进行高开销的计算。")]),t._v(" "),a("h4",{attrs:{id:"usecontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[t._v("#")]),t._v(" useContext")]),t._v(" "),a("p",[t._v("​\t如果需要在组件之间共享状态，可以使用useContext()。和"),a("a",{attrs:{href:"#context%E5%AF%B9%E8%B1%A1"}},[t._v("Context.Consumer")]),t._v("一样")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//接收组件\nfunction Button() {\n\tconst {theme, toggle} = useContext(ThemeContext);\n  \treturn (\n        <button\n          onClick={toggle} //调用回调\n          style={{backgroundColor: theme}}\n        >\n          Toggle Theme\n        </button>\n  \t);\n}\n\n// 等价于\n// Context.Consumer\n//接收组件\nfunction Button() {\n  return (\n    <ThemeContext.Consumer>\n      {({theme, toggle}) => (\n        <button\n          onClick={toggle} //调用回调\n          style={{backgroundColor: theme}}>\n          Toggle Theme\n        </button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);