(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{418:function(e,t,a){"use strict";a.r(t);var v=a(56),r=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),a("h3",{attrs:{id:"vue对象选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue对象选项"}},[e._v("#")]),e._v(" vue对象选项")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let vm = new Vue({\n\t// DOM\n\tel:  '#root',\n\ttemplate: <div></div>,\n\trender: () => {},\n\trenderError: () => {},\n\t// 数据\n\tdata: {},\n\tprops: {},\n\tmethods:{},\n\tcomputed:{},\n\twatch: {}\n\t// 生命周期钩子\n\tbeforeCreate:()=>{},\n\tcreated:()=>{},\n\tbeforeMount:()=>{},\n\tmounted:()=>{},\n\tbeforeUpdate:()=>{},\n\tupdated:()=>{},\n\tbeforeDestory:()=>{},\n\tdestoryed:()=>{},\n\tactivated:()=>{},\n\tdeactivated:()=>{},\n\terrorCaptured:()=>{},\n\t// 资源\n\tdirectives: {},\n\tfilters: {},\n\tcomponents:{},\n\t// 其他\n\tname: 'vm',\n})\n")])])]),a("h4",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[e._v("#")]),e._v(" DOM")]),e._v(" "),a("h5",{attrs:{id:"el"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#el"}},[e._v("#")]),e._v(" el")]),e._v(" "),a("blockquote",[a("p",[e._v("如果 "),a("code",[e._v("render")]),e._v(" 函数和 "),a("code",[e._v("template")]),e._v(" property 都不存在，挂载 DOM 元素的 HTML 会被提取出来用作模板")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：string | Element")])]),e._v(" "),a("li",[a("p",[e._v("限制：只在用new Vue创建实例时生效")])]),e._v(" "),a("li",[a("p",[e._v("详细：")]),e._v(" "),a("p",[e._v("实例挂载点")])])]),e._v(" "),a("h5",{attrs:{id:"template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[e._v("#")]),e._v(" template")]),e._v(" "),a("blockquote",[a("p",[e._v("如果 Vue 选项中包含"),a("code",[e._v("render")]),e._v("函数，该模板将被忽略。")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：string")])]),e._v(" "),a("li",[a("p",[e._v("详细：")]),e._v(" "),a("p",[e._v("替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽。")])])]),e._v(" "),a("h5",{attrs:{id:"render"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[e._v("#")]),e._v(" render")]),e._v(" "),a("ul",[a("li",[e._v("类型：(createElement: () => VNode) => VNode")])]),e._v(" "),a("h5",{attrs:{id:"rendererror"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rendererror"}},[e._v("#")]),e._v(" renderError")]),e._v(" "),a("blockquote",[a("p",[e._v("当 "),a("code",[e._v("render")]),e._v(" 函数遭遇错误时，提供另外一种渲染输出。")])]),e._v(" "),a("ul",[a("li",[e._v("类型：(createElement: () => VNode,error: Error) => VNode")])]),e._v(" "),a("h4",{attrs:{id:"数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据"}},[e._v("#")]),e._v(" 数据")]),e._v(" "),a("h5",{attrs:{id:"data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" data")]),e._v(" "),a("ul",[a("li",[e._v("类型：Object | Function")]),e._v(" "),a("li",[e._v("限制：组件的定义只接受Function")])]),e._v(" "),a("h5",{attrs:{id:"props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" props")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型："),a("code",[e._v("Array<string>")]),e._v(" | Object")])]),e._v(" "),a("li",[a("p",[e._v("详细：props是对象时，可以检查prop类型")]),e._v(" "),a("p",[e._v("你可以基于对象的语法使用以下选项：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("type")]),e._v("：可以是下列原生构造函数中的一种："),a("code",[e._v("String")]),e._v("、"),a("code",[e._v("Number")]),e._v("、"),a("code",[e._v("Boolean")]),e._v("、"),a("code",[e._v("Array")]),e._v("、"),a("code",[e._v("Object")]),e._v("、"),a("code",[e._v("Date")]),e._v("、"),a("code",[e._v("Function")]),e._v("、"),a("code",[e._v("Symbol")]),e._v("、任何自定义构造函数、或上述内容组成的数组。会检查一个 prop 是否是给定的类型，否则抛出警告。")]),e._v(" "),a("li",[a("code",[e._v("default")]),e._v("："),a("code",[e._v("any")])]),e._v(" "),a("li",[a("code",[e._v("required")]),e._v("："),a("code",[e._v("Boolean")])]),e._v(" "),a("li",[a("code",[e._v("validator")]),e._v("："),a("code",[e._v("Function")]),e._v("\n自定义验证函数会将该 prop 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 falsy 的值 (也就是验证失败)，一个控制台警告将会被抛出。")])])])]),e._v(" "),a("h5",{attrs:{id:"propsdata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#propsdata"}},[e._v("#")]),e._v(" propsData")]),e._v(" "),a("blockquote",[a("p",[e._v("没用过没见过，先空着吧")])]),e._v(" "),a("h5",{attrs:{id:"computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[e._v("#")]),e._v(" computed")]),e._v(" "),a("blockquote",[a("p",[e._v("计算属性，一般用于多个数据影响一个数据。")]),e._v(" "),a("p",[e._v("计算属性的结果会被缓存，如果依赖数据不变，再次调用时不会重新计算。")]),e._v(" "),a("p",[e._v("计算属性的用法和data一样")])]),e._v(" "),a("ul",[a("li",[e._v("类型：{ [key:string]: Fcuntion | { get : Function, set: Function } }")])]),e._v(" "),a("h5",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" methods")]),e._v(" "),a("blockquote",[a("p",[e._v("方法，需要手动调用")]),e._v(" "),a("p",[e._v("每次调用都会重新计算")])]),e._v(" "),a("ul",[a("li",[e._v("类型：{ [key: string]: Function }")])]),e._v(" "),a("h5",{attrs:{id:"watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch"}},[e._v("#")]),e._v(" watch")]),e._v(" "),a("blockquote",[a("p",[e._v("监测，一般用于一个数据影响多个数据")]),e._v(" "),a("p",[e._v("依赖数据变化时自动调用")])]),e._v(" "),a("ul",[a("li",[e._v("类型：{ [key: string]: string | Function | Object | Array }  Function 应该是最常用的")])]),e._v(" "),a("h4",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),a("h5",{attrs:{id:"一般钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般钩子"}},[e._v("#")]),e._v(" 一般钩子")]),e._v(" "),a("p",[a("img",{attrs:{src:"/notes/imgs/vue/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg",alt:"vue生命周期"}})]),e._v(" "),a("h5",{attrs:{id:"activated-deactivated"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#activated-deactivated"}},[e._v("#")]),e._v(" activated/deactivated")]),e._v(" "),a("blockquote",[a("p",[e._v("被 keep-alive 缓存的组件激活/停用时调用。")])]),e._v(" "),a("h5",{attrs:{id:"errorcaptured"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#errorcaptured"}},[e._v("#")]),e._v(" errorCaptured")]),e._v(" "),a("blockquote",[a("p",[e._v("当捕获一个来自子孙组件的错误时被调用。2.5.0+ 新增")])]),e._v(" "),a("ul",[a("li",[e._v("类型："),a("code",[e._v("(err: Error, vm: Component, info: string) => ?boolean")])])]),e._v(" "),a("h4",{attrs:{id:"资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[e._v("#")]),e._v(" 资源")]),e._v(" "),a("h5",{attrs:{id:"components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[e._v("#")]),e._v(" components")]),e._v(" "),a("blockquote",[a("p",[e._v("定义Vue实例可用组件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import ComponentA from 'xxx'\nnew Vue({\n  ...\n  components: {\n  \t'component-a': ComponentA\n  }\n})\n")])])]),a("h5",{attrs:{id:"directives"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#directives"}},[e._v("#")]),e._v(" directives")]),e._v(" "),a("p",[a("a",{attrs:{href:"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4"}},[e._v("自定义指令")])]),e._v(" "),a("blockquote",[a("p",[e._v("定义Vue实例可用指令")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Vue({\n  ...\n  directives: {\n    focus: {\n      // 指令的定义\n      inserted: function (el) {\n        el.focus()\n      }\n    }\n  }\n})\n")])])]),a("h5",{attrs:{id:"filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filters"}},[e._v("#")]),e._v(" filters")]),e._v(" "),a("p",[a("a",{attrs:{href:"#%E8%BF%87%E6%BB%A4%E5%99%A8"}},[e._v("过滤器")])]),e._v(" "),a("blockquote",[a("p",[e._v("定义Vue实例可用过滤器")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Vue({\n  ...\n  filters: {\n  \tcapitalize: function (value) {\n  \t\t...\n  \t\treturn ....\n  \t}\n  }\n})\n")])])]),a("h4",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),a("h5",{attrs:{id:"mixins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" mixins")]),e._v(" "),a("p",[e._v("[混入](#混入 mixin)")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("mixins")]),e._v(" 选项接收一个混入对象的数组。")])]),e._v(" "),a("ul",[a("li",[e._v("类型："),a("code",[e._v("Array<Object>")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var mixin = {\n  created: function () { console.log(1) }\n}\nvar vm = new Vue({\n  created: function () { console.log(2) },\n  mixins: [mixin]\n})\n")])])]),a("h5",{attrs:{id:"name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name"}},[e._v("#")]),e._v(" name")]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("限制：只有作为组件选项时起作用")])]),e._v(" "),a("h3",{attrs:{id:"指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[e._v("#")]),e._v(" 指令")]),e._v(" "),a("h4",{attrs:{id:"常用指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[e._v("#")]),e._v(" 常用指令")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("v-text")])]),e._v(" "),a("li",[a("p",[e._v("v-html")])]),e._v(" "),a("li",[a("p",[e._v("v-show")])]),e._v(" "),a("li",[a("p",[e._v("v-if")])]),e._v(" "),a("li",[a("p",[e._v("v-else-if")])]),e._v(" "),a("li",[a("p",[e._v("v-else")])]),e._v(" "),a("li",[a("p",[e._v("v-for")]),e._v(" "),a("p",[e._v("必须有唯一的key值，如果数据有插入/删除等影响原有数据顺序的情况，不建议使用index作为key值。")])]),e._v(" "),a("li",[a("p",[e._v("v-on")]),e._v(" "),a("p",[e._v("绑定事件")]),e._v(" "),a("p",[e._v("可以简写为@click的形式")])]),e._v(" "),a("li",[a("p",[e._v("v-bind")]),e._v(" "),a("p",[e._v("动态属性")]),e._v(" "),a("p",[e._v("可以简写为:title的形式")])]),e._v(" "),a("li",[a("p",[e._v("v-model")]),e._v(" "),a("p",[e._v("双向绑定")]),e._v(" "),a("p",[e._v(":value 和 @input 的语法糖")])]),e._v(" "),a("li",[a("p",[e._v("v-slot")]),e._v(" "),a("p",[a("a",{attrs:{href:"#%E6%8F%92%E6%A7%BD"}},[e._v("插槽")])]),e._v(" "),a("p",[e._v("v-slot: 插槽名，默认为default")]),e._v(" "),a("p",[e._v("可以简写为#header")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 具名插槽 --\x3e\n<base-layout>\n  <template v-slot:header>\n    Header content\n  </template>\n\n  Default slot content\n\n  <template v-slot:footer>\n    Footer content\n  </template>\n</base-layout>\n\n\x3c!-- 接收 prop 的具名插槽 --\x3e\n<infinite-scroll>\n  <template v-slot:item="slotProps">\n    <div class="item">\n      {{ slotProps.item.text }}\n    </div>\n  </template>\n</infinite-scroll>\n\n\x3c!-- 接收 prop 的默认插槽，使用了解构 --\x3e\n<mouse-position v-slot="{ x, y }">\n  Mouse position: {{ x }}, {{ y }}\n</mouse-position>\n')])])])]),e._v(" "),a("li",[a("p",[e._v("v-pre")]),e._v(" "),a("p",[e._v("跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。")])]),e._v(" "),a("li",[a("p",[e._v("v-cloak")]),e._v(" "),a("p",[e._v("这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 "),a("code",[e._v("[v-cloak] { display: none }")]),e._v(" 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。")])]),e._v(" "),a("li",[a("p",[e._v("v-once")]),e._v(" "),a("p",[e._v("只渲染元素和组件"),a("strong",[e._v("一次")]),e._v("。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。")]),e._v(" "),a("p",[a("strong",[e._v("如果确定这个元素及其子组件以后再也不会变动时使用")])])])]),e._v(" "),a("h4",{attrs:{id:"自定义指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[e._v("#")]),e._v(" 自定义指令")]),e._v(" "),a("h5",{attrs:{id:"钩子函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数"}},[e._v("#")]),e._v(" 钩子函数")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("bind")]),e._v("：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("inserted")]),e._v("：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("update")]),e._v("：所在组件的 VNode 更新时调用，"),a("strong",[e._v("但是可能发生在其子 VNode 更新之前")]),e._v("。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("componentUpdated")]),e._v("：指令所在组件的 VNode "),a("strong",[e._v("及其子 VNode")]),e._v(" 全部更新后调用。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("unbind")]),e._v("：只调用一次，指令与元素解绑时调用。")])])]),e._v(" "),a("h5",{attrs:{id:"参数说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数说明"}},[e._v("#")]),e._v(" 参数说明")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("el")]),e._v("：指令所绑定的元素，可以用来直接操作 DOM。")]),e._v(" "),a("li",[a("code",[e._v("binding")]),e._v("：一个对象，包含以下 property：\n"),a("ul",[a("li",[a("code",[e._v("name")]),e._v("：指令名，不包括 "),a("code",[e._v("v-")]),e._v(" 前缀。")]),e._v(" "),a("li",[a("code",[e._v("value")]),e._v("：指令的绑定值，例如："),a("code",[e._v('v-my-directive="1 + 1"')]),e._v(" 中，绑定值为 "),a("code",[e._v("2")]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("oldValue")]),e._v("：指令绑定的前一个值，仅在 "),a("code",[e._v("update")]),e._v(" 和 "),a("code",[e._v("componentUpdated")]),e._v(" 钩子中可用。无论值是否改变都可用。")]),e._v(" "),a("li",[a("code",[e._v("expression")]),e._v("：字符串形式的指令表达式。例如 "),a("code",[e._v('v-my-directive="1 + 1"')]),e._v(" 中，表达式为 "),a("code",[e._v('"1 + 1"')]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("arg")]),e._v("：传给指令的参数，可选。例如 "),a("code",[e._v("v-my-directive:foo")]),e._v(" 中，参数为 "),a("code",[e._v('"foo"')]),e._v("。")]),e._v(" "),a("li",[a("code",[e._v("modifiers")]),e._v("：一个包含修饰符的对象。例如："),a("code",[e._v("v-my-directive.foo.bar")]),e._v(" 中，修饰符对象为 "),a("code",[e._v("{ foo: true, bar: true }")]),e._v("。")])])]),e._v(" "),a("li",[a("code",[e._v("vnode")]),e._v("：Vue 编译生成的虚拟节点。")]),e._v(" "),a("li",[a("code",[e._v("oldVnode")]),e._v("：上一个虚拟节点，仅在 "),a("code",[e._v("update")]),e._v(" 和 "),a("code",[e._v("componentUpdated")]),e._v(" 钩子中可用。")])]),e._v(" "),a("blockquote",[a("p",[e._v("除了 "),a("code",[e._v("el")]),e._v(" 之外，其它参数都应该是只读的。")])]),e._v(" "),a("h3",{attrs:{id:"插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[e._v("#")]),e._v(" 插槽")]),e._v(" "),a("h4",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 父组件\n<Child>父组件传值</Child>\n<Child></Child>\n// Child子组件\n<div>\n\t子组件内容...\n\t<slot>默认内容</slot>\n</div>\n\n// 最终显示1\n\t子组件内容...\n\t父组件传值\n// 最终显示2\n\t子组件内容...\n\t默认内容\n")])])]),a("h4",{attrs:{id:"具名插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具名插槽"}},[e._v("#")]),e._v(" 具名插槽")]),e._v(" "),a("blockquote",[a("p",[e._v("用于组件内有多处插槽时，确定内容插入位置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 父组件\n<base-layout>\n  <template v-slot:header>\n    <h1>Here might be a page title</h1>\n  </template>\n\n  <p>A paragraph for the main content.</p>\n  <p>And another one.</p>\n\n  <template v-slot:footer>\n    <p>Here\'s some contact info</p>\n  </template>\n</base-layout>\n\n// 子组件\n<div class="container">\n  <header>\n    <slot name="header"></slot>\n  </header>\n  <main>\n    <slot></slot>\n  </main>\n  <footer>\n    <slot name="footer"></slot>\n  </footer>\n</div>\n')])])]),a("h4",{attrs:{id:"作用域插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域插槽"}},[e._v("#")]),e._v(" 作用域插槽")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 父组件获取子组件绑定的属性\n// v-slot:default="slotProps"  可以简写为   v-slot="slotProps"  只有default插槽可以这么简写\n<current-user>\n  <template v-slot:default="slotProps">\n    {{ slotProps.user.firstName }}\n  </template>\n  <template v-slot:deconstruction="{user={firstName: \'hh\'}}">\n    {{ user.firstName }}\n  </template>\n</current-user>\n\n// 子组件绑定user属性\n<span>\n  <slot :user="user">\n    {{ user.lastName }}\n  </slot>\n  <slot :user="user" name=\'deconstruction\'>\n    解构插槽Prop\n    这里可以用到ES6解构的所有语法，比如重命名、默认赋值\n  </slot>\n</span>\n')])])]),a("h4",{attrs:{id:"缩写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缩写"}},[e._v("#")]),e._v(" 缩写")]),e._v(" "),a("p",[a("code",[e._v('v-slot:header="{user}"')])]),e._v(" "),a("p",[e._v("简写为")]),e._v(" "),a("p",[a("code",[e._v('#header="{user}"')])]),e._v(" "),a("p",[a("strong",[e._v("default可以省略")])]),e._v(" "),a("p",[a("code",[e._v('v-slot="{user}"')])]),e._v(" "),a("p",[e._v("简写为")]),e._v(" "),a("p",[a("code",[e._v('#="{user}"')])]),e._v(" "),a("h4",{attrs:{id:"废弃的用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#废弃的用法"}},[e._v("#")]),e._v(" 废弃的用法")]),e._v(" "),a("p",[a("strong",[a("code",[e._v("slot")]),e._v(" 和 "),a("code",[e._v("slot-scope")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 父组件\n<div slot='header' slot-scope=\"slotProps\"></div>\n")])])]),a("h3",{attrs:{id:"混入-mixin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混入-mixin"}},[e._v("#")]),e._v(" 混入 mixin")]),e._v(" "),a("blockquote",[a("p",[e._v("一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。")])]),e._v(" "),a("h4",{attrs:{id:"合并方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并方式"}},[e._v("#")]),e._v(" 合并方式")]),e._v(" "),a("ul",[a("li",[e._v("数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先")]),e._v(" "),a("li",[e._v("值为对象的选项，例如 "),a("code",[e._v("methods")]),e._v("、"),a("code",[e._v("components")]),e._v(" 和 "),a("code",[e._v("directives")]),e._v("，将被合并为同一个对象。两个对象键名冲突时，取组件对象的键值对")]),e._v(" "),a("li",[e._v("同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子"),a("strong",[e._v("之前")]),e._v("调用")])]),e._v(" "),a("h3",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[e._v("#")]),e._v(" 过滤器")]),e._v(" "),a("h4",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),a("ul",[a("li",[e._v("在组件内定义")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("filters: {\n  capitalize: function (value) {\n    if (!value) return ''\n    value = value.toString()\n    return value.charAt(0).toUpperCase() + value.slice(1)\n  }\n}\n")])])]),a("ul",[a("li",[e._v("全局注册")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Vue.filter('capitalize', function (value) {\n  if (!value) return ''\n  value = value.toString()\n  return value.charAt(0).toUpperCase() + value.slice(1)\n})\n")])])]),a("h4",{attrs:{id:"使用-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-2"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),a("ul",[a("li",[e._v("过滤器可以用在两个地方："),a("strong",[e._v("双花括号插值和 "),a("code",[e._v("v-bind")]),e._v(" 表达式")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 在双花括号中 --\x3e\n{{ message | capitalize }}\n\n\x3c!-- 在 `v-bind` 中 --\x3e\n<div v-bind:id="rawId | formatId"></div>\n')])])]),a("ul",[a("li",[e._v("串联")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{{ message | filterA | filterB }}\n")])])]),a("ul",[a("li",[e._v("接收参数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{{ message | filterA('arg1', arg2) }}\n")])])]),a("h2",{attrs:{id:"组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[e._v("#")]),e._v(" 组件")]),e._v(" "),a("h3",{attrs:{id:"动态组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态组件"}},[e._v("#")]),e._v(" 动态组件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!-- 组件会在 `currentTabComponent` 改变时改变 --\x3e\n<component :is="currentTabComponent"></component>\n')])])]),a("h4",{attrs:{id:"keep-alive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep-alive")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<keep-alive>\n  <component v-bind:is="currentTabComponent"></component>\n</keep-alive>\n')])])]),a("p",[a("strong",[e._v("遇到的问题：不需要缓存的组件也被缓存")])]),e._v(" "),a("p",[e._v("解决方案："),a("code",[e._v("include")]),e._v(" 和 "),a("code",[e._v("exclude")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<keep-alive exclude="Detail">\n  <component :is="currentTabComponent"></component>\n</keep-alive>\n')])])]),a("h3",{attrs:{id:"单文件组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单文件组件"}},[e._v("#")]),e._v(" 单文件组件")]),e._v(" "),a("blockquote",[a("p",[e._v("文件扩展名为 .vue 的 single-file components (单文件组件)")])]),e._v(" "),a("ul",[a("li",[a("p",[void 0,e._v("包起来，只能有一个根元素")],2)]),e._v(" "),a("li",[a("p",[e._v("导出组件内容")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<script>\n\tmodule.exports = {\n\t\tname: 'componentA',\n\t\tdata: function() {\n\t\t\treturn {}\n\t\t}\n\t\t// 其他配置\n\t\t...\n\t}\n<\/script>\n")])])])]),e._v(" "),a("li",[a("p",[e._v("样式")]),e._v(" "),a("p",[a("code",[e._v("scoped")]),e._v("的作用是：使style中定义的样式只在当前组件中生效，避免污染全局样式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<style scoped>\n</style>\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[e._v("#")]),e._v(" 路由")]),e._v(" "),a("h3",{attrs:{id:"关键组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键组件"}},[e._v("#")]),e._v(" 关键组件")]),e._v(" "),a("h5",{attrs:{id:"router-link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-link"}},[e._v("#")]),e._v(" router-link")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("router-link")]),e._v(" 组件支持用户在具有路由功能的应用中 (点击) 导航。")]),e._v(" "),a("p",[e._v("通过 "),a("code",[e._v("to")]),e._v(" 属性指定目标地址，默认渲染成带有正确链接的 "),a("code",[e._v("a")]),e._v(" 标签，可以通过配置 "),a("code",[e._v("tag")]),e._v(" 属性生成别的标签.。")]),e._v(" "),a("p",[e._v("另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。")])]),e._v(" "),a("h5",{attrs:{id:"to"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#to"}},[e._v("#")]),e._v(" to")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型："),a("code",[e._v("string | Location")])])]),e._v(" "),a("li",[a("p",[e._v("required")]),e._v(" "),a("blockquote",[a("p",[e._v("表示目标路由的链接。当被点击后，内部会立刻把 "),a("code",[e._v("to")]),e._v(" 的值传到 "),a("code",[e._v("router.push()")]),e._v("，所以这个值可以是一个字符串或者是描述目标位置的对象。")])])])]),e._v(" "),a("h5",{attrs:{id:"replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[e._v("#")]),e._v(" replace")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("boolean")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v("false")])]),e._v(" "),a("blockquote",[a("p",[e._v("设置 "),a("code",[e._v("replace")]),e._v(" 属性的话，当点击时，会调用 "),a("code",[e._v("router.replace()")]),e._v(" 而不是 "),a("code",[e._v("router.push()")]),e._v("，于是导航后不会留下 history 记录。")])])])]),e._v(" "),a("h5",{attrs:{id:"append"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#append"}},[e._v("#")]),e._v(" append")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("boolean")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v("false")])]),e._v(" "),a("blockquote",[a("p",[e._v("设置 "),a("code",[e._v("append")]),e._v(" 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 "),a("code",[e._v("/a")]),e._v(" 导航到一个相对路径 "),a("code",[e._v("b")]),e._v("，如果没有配置 "),a("code",[e._v("append")]),e._v("，则路径为 "),a("code",[e._v("/b")]),e._v("，如果配了，则为 "),a("code",[e._v("/a/b")])]),e._v(" "),a("p",[e._v("用到嵌套路由中，就不需要写多层path")])])])]),e._v(" "),a("h5",{attrs:{id:"tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[e._v("#")]),e._v(" tag")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("string")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v('"a"')])]),e._v(" "),a("p",[e._v("有时候想要 "),a("code",[e._v("router-link")]),e._v(" 渲染成某种标签，例如 "),a("code",[e._v("li")]),e._v("。 于是我们使用 "),a("code",[e._v("tag")]),e._v(" prop 类指定何种标签，同样它还是会监听点击，触发导航。")])])]),e._v(" "),a("h5",{attrs:{id:"active-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#active-class"}},[e._v("#")]),e._v(" active-class")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("string")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v('"router-link-active"')])]),e._v(" "),a("blockquote",[a("p",[e._v("设置链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 "),a("code",[e._v("linkActiveClass")]),e._v(" 来全局配置。")])])])]),e._v(" "),a("h5",{attrs:{id:"exact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exact"}},[e._v("#")]),e._v(" exact")]),e._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("boolean")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v("false")])]),e._v(" "),a("p",[e._v("“是否激活”默认类名的依据是"),a("strong",[e._v("包含匹配")]),e._v("。 举个例子，如果当前的路径是 "),a("code",[e._v("/a")]),e._v(" 开头的，那么 "),a("code",[e._v('<router-link to="/a">')]),e._v(" 也会被设置 CSS 类名。")]),e._v(" "),a("p",[e._v("按照这个规则，每个路由都会激活 "),a("code",[e._v('<router-link to="/">')]),e._v("！想要链接使用“精确匹配模式”，则使用 "),a("code",[e._v("exact")]),e._v(" 属性")])])])]),e._v(" "),a("h4",{attrs:{id:"router-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-view"}},[e._v("#")]),e._v(" router-view")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("router-view")]),e._v("组件是一个 functional 组件，渲染路径匹配到的视图组件。"),a("code",[e._v("router-view")]),e._v(" 渲染的组件还可以内嵌自己的"),a("code",[e._v("router-view")]),e._v(" ，根据嵌套路径，渲染嵌套组件。")])]),e._v(" "),a("h5",{attrs:{id:"name-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#name-2"}},[e._v("#")]),e._v(" name")]),e._v(" "),a("blockquote",[a("p",[e._v("有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有 "),a("code",[e._v("sidebar")]),e._v(" (侧导航) 和 "),a("code",[e._v("main")]),e._v(" (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 "),a("code",[e._v("router-view")]),e._v(" 没有设置名字，那么默认为 "),a("code",[e._v("default")])])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("string")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v('"default"')])]),e._v(" "),a("blockquote",[a("p",[e._v("如果 "),a("code",[e._v("router-view")]),e._v("设置了名称，则会渲染对应的路由配置中 "),a("code",[e._v("components")]),e._v(" 下的相应组件")])])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<router-view class="view one"></router-view>\n<router-view class="view two" name="a"></router-view>\n<router-view class="view three" name="b"></router-view>\n\n// config\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \'/\',\n      components: {\n        default: Foo,\n        a: Bar,\n        b: Baz\n      }\n    }\n  ]\n})\n')])])]),a("h3",{attrs:{id:"router-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-config"}},[e._v("#")]),e._v(" router config")]),e._v(" "),a("h4",{attrs:{id:"routes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routes"}},[e._v("#")]),e._v(" routes")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface RouteConfig = {\n  path: string,   // 路由路径\n  component?: Component,  //  该路由对应展示的组件\n  name?: string, // 命名路由\n  components?: { [name: string]: Component }, // 命名视图组件\n  redirect?: string | Location | Function,  //  进入该路由时重定向到其他路径\n  props?: boolean | Object | Function,\n  alias?: string | Array<string>, // 别名：当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。\n  children?: Array<RouteConfig>, // 嵌套路由\n  beforeEnter?: (to: Route, from: Route, next: Function) => void,\n  meta?: any,\n  caseSensitive?: boolean, // 匹配规则是否大小写敏感？(默认值：false)\n  pathToRegexpOptions?: Object // 编译正则的选项\n}\n")])])]),a("h4",{attrs:{id:"mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mode"}},[e._v("#")]),e._v(" mode")]),e._v(" "),a("ul",[a("li",[e._v("类型: "),a("code",[e._v("string")])]),e._v(" "),a("li",[e._v("默认值: "),a("code",[e._v('"hash" (浏览器环境) | "abstract" (Node.js 环境)')])]),e._v(" "),a("li",[e._v("可选值: "),a("code",[e._v('"hash" | "history" | "abstract"')])])]),e._v(" "),a("h4",{attrs:{id:"base"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[e._v("#")]),e._v(" base")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("string")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v('"/"')])]),e._v(" "),a("p",[e._v("应用的基路径。例如，如果整个单页应用服务在 "),a("code",[e._v("/app/")]),e._v(" 下，然后 "),a("code",[e._v("base")]),e._v(" 就应该设为 "),a("code",[e._v('"/app/"')])])])]),e._v(" "),a("h4",{attrs:{id:"linkactiveclass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linkactiveclass"}},[e._v("#")]),e._v(" linkActiveClass")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("string")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v('"router-link-active"')])]),e._v(" "),a("p",[e._v("全局配置 "),a("code",[e._v("router-link")]),e._v(" 默认的激活的 class。")])])]),e._v(" "),a("h4",{attrs:{id:"scrollbehavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrollbehavior"}},[e._v("#")]),e._v(" scrollBehavior")]),e._v(" "),a("p",[a("a",{attrs:{href:"#%E6%BB%9A%E5%8A%A8%E8%A1%8C%E4%B8%BA"}},[e._v("滚动行为")])]),e._v(" "),a("ul",[a("li",[e._v("类型: `Function")])]),e._v(" "),a("h4",{attrs:{id:"fallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fallback"}},[e._v("#")]),e._v(" fallback")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型: "),a("code",[e._v("boolean")])])]),e._v(" "),a("li",[a("p",[e._v("默认值: "),a("code",[e._v("true")])]),e._v(" "),a("p",[e._v("当浏览器不支持 "),a("code",[e._v("history.pushState")]),e._v(" 控制路由是否应该回退到 "),a("code",[e._v("hash")]),e._v(" 模式。默认值为 "),a("code",[e._v("true")]),e._v("。")])])]),e._v(" "),a("h3",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[e._v("#")]),e._v(" 实例方法")]),e._v(" "),a("h4",{attrs:{id:"编程式导航"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编程式导航"}},[e._v("#")]),e._v(" 编程式导航")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("router.push(path)")]),e._v(": 跳转到某个路径")]),e._v(" "),a("li",[a("code",[e._v("router.replace(path)")]),e._v(":不产生新的历史记录")]),e._v(" "),a("li",[a("code",[e._v("router.go(num)")]),e._v(":向前进num个路径，如果是负数，就返回num个记录")]),e._v(" "),a("li",[a("code",[e._v("router.back()")]),e._v(":返回上一个记录")]),e._v(" "),a("li",[a("code",[e._v("router.forward()")]),e._v(":向前进一个记录")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 字符串\nrouter.push('home')\n\n// 对象\nrouter.push({ path: 'home' })\n\n// 命名的路由\nrouter.push({ name: 'user', params: { userId: '123' }})\n\n// 带查询参数，变成 /register?plan=private\nrouter.push({ path: 'register', query: { plan: 'private' }})\n")])])]),a("h4",{attrs:{id:"导航守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导航守卫"}},[e._v("#")]),e._v(" 导航守卫")]),e._v(" "),a("h4",{attrs:{id:"其他-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-2"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),a("h3",{attrs:{id:"路由懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[e._v("#")]),e._v(" 路由懒加载")]),e._v(" "),a("h3",{attrs:{id:"过渡效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过渡效果"}},[e._v("#")]),e._v(" 过渡效果")]),e._v(" "),a("h3",{attrs:{id:"滚动行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滚动行为"}},[e._v("#")]),e._v(" 滚动行为")])])}),[],!1,null,null,null);t.default=r.exports}}]);