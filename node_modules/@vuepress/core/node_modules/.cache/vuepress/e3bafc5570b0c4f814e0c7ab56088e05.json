{"remainingRequest":"D:\\myCode\\notes\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\myCode\\notes\\node_modules\\@vuepress\\core\\lib\\client\\util.js","dependencies":[{"path":"D:\\myCode\\notes\\node_modules\\@vuepress\\core\\lib\\client\\util.js","mtime":1645094223337},{"path":"D:\\myCode\\notes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1645094223867},{"path":"D:\\myCode\\notes\\node_modules\\babel-loader\\lib\\index.js","mtime":1645094223766}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}